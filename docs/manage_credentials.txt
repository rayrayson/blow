Manage user and security credentials
====================================

User credentials are required to launch and to connect remote instance(s).

Amazon EC2 uses an asymmetric key authentication mechanism. In this scheme the key is composed by two parts,
a public part and a private a part. For this reason it is named a `key pair`.

There are different ways to create a `key pair`. You can do it using the `Linux` command ``ssh-keygen``,
but in the context of the cloud more commonly you are required to use the key provided by the cloud provider.

In this case we say that the key pair is `managed`, since when you create a new `key pair` what happen is that you will
download and have to store in safe place the **private** part of the key, while the **public** part of the `key pair` is retained by
cloud provider, which will install it in the instance(s) when needed.


Summarizing the authentication mechanism is made up of the following parts:

  * User name: The user name used to logon the remote instance.
  * Key pair name: A name for a specific asymmetric key pair.
  * Public key file: The public part of the asymmetric key, kept by the cloud provider and installed into the instances.
  * Private key file: The private part of the key pair, given by the provider when creating a new key pair.


`Blow` needs these information to be able to launch and to connect remote instances and it provides a very flexible
configuration mechanism that adapts to different users requirements and configuration scenarios.


Zero configuration
------------------

This is the simplest approach and does not require you to provide any of the above information.

`Blow` will automatically create a new user account in the launched instance(s), named as your current local user.

Moreover will install the `key pair` available in the current directory or, alternatively, in the ``$HOME/.ssh/`` directory
(it will look for only key files named ``id_rsa`` - ``id_rsa.pub`` or ``id_dsa`` - ``id_dsa.pub``).

If none of them are available, `Blow` will generate a new key pair files in the current directory, naming these files as
``id_rsa`` - ``id_rsa.pub``.

.. attention::
  This configuration does not work for custom (user provided) AMIs.

Specify the user credentials
----------------------------

Although the above approach it the simplest and quickest way, it may not work in some circumstances because, for example,
the AMI you are using does not allow to install a new user.

The most common configuration scenario is that you want to use an existing `managed` key pair along with the user account
as defined by cloud provider.

Using `Blow` you can do that specifying the following attributes in the configuration file::

  userName: '<the-instance-default-account>'
  keyPair: '<your-key-pair>'
  privateKey: '/path/to/your-key-pair.pem'


Where ``<the-instance-default-account>`` represent the logon user name as defined by the cloud provider.
Using the Amazon EC2 service most of the time this value is ``ec2-user`` but it may differ depending which AMI you are launching.

The ``<your-key-pair>`` value is the name of a ``managed`` key pair you have created using the Amazon CLI tools or the Amazon dashboard.
See the following link for more details http://docs.amazonwebservices.com/AWSEC2/latest/UserGuide/generating-a-keypair.html

Finally ``/path/to/your-key-pair.pem`` represents the path where you have stored the
private key file that the cloud provider given you during the key pair creation process.


Advanced credentials configuration
----------------------------------

Use a local key pair with a custom defined user logon name::

  userName: '<custom-user-name>'
  privateKey: '/path/to/the/private-key.file'
  publicKey: '/path/to/teh/public-key.file'
  createUser: true


In the above example a custom user name is configured as logon account in the launched instance(s).

Note in this case you need to use a `non-managed` key pair, that you need to have previously created
using the `Linux` command ``ssh-keygen`` .

Since the public part of the key pair needs to be installed in the remote instances, it must be specified explicitly in the
configuration file along with the private key.

